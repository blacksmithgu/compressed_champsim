//Hawkeye Cache Replacement Tool v2.0
//UT AUSTIN RESEARCH LICENSE (SOURCE CODE)
//The University of Texas at Austin has developed certain software and documentation that it desires to
//make available without charge to anyone for academic, research, experimental or personal use.
//This license is designed to guarantee freedom to use the software for these purposes. If you wish to
//distribute or make other use of the software, you may purchase a license to do so from the University of
//Texas.
///////////////////////////////////////////////
//                                            //
//     Hawkeye [Jain and Lin, ISCA' 16]       //
//     Akanksha Jain, akanksha@cs.utexas.edu  //
//                                            //
///////////////////////////////////////////////

// Source code for configs 1 and 2

#include "cache.h"
#include "uncore.h"
#include <map>
#include <cassert>

#define LLC_SETS LLC_SET
#define LLC_WAYS LLC_WAY

#include "hawkeye_config.h"

#define maxRRPV 7
uint32_t rrpv[LLC_SETS][LLC_WAYS];
uint64_t perset_mytimer[LLC_SETS];

uint64_t signatures[LLC_SETS][LLC_WAYS];
bool prefetched[LLC_SETS][LLC_WAYS];

#define SAMPLED_CACHE_SIZE 2800*NUM_CPUS
map<uint64_t, ADDR_INFO> addr_history; // OPT Sampler

HawkeyeConfig config1;

#include <math.h>
#define bitmask(l) (((l) == 64) ? (unsigned long long)(-1LL) : ((1LL << (l))-1LL))
#define bits(x, i, l) (((x) >> (i)) & bitmask(l))

#define SAMPLING 1
#ifdef SAMPLING
    #define SAMPLED_SET(set) (bits(set, 0 , 8) == bits(set, ((unsigned long long)log2(LLC_SETS) - 8), 8) )
#else
    #define SAMPLED_SET(set) (true)
#endif


// initialize replacement state
void CACHE::llc_initialize_replacement()
{
    for (int i=0; i<LLC_SETS; i++) {
        for (int j=0; j<LLC_WAYS; j++) {
            rrpv[i][j] = maxRRPV;
            signatures[i][j] = 0;
            prefetched[i][j] = false;
        }
        perset_mytimer[i] = 0;
    }

    addr_history.clear();
    config1.init(1, 1, 1, 1);
    cout << "Initialize Hawkeye state" << endl;
}

// find replacement victim
// return value should be 0 ~ 15 or 16 (bypass)
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
    // look for the maxRRPV line
    for (uint32_t i=0; i<LLC_WAYS; i++)
        if (rrpv[set][i] == maxRRPV)
            return i;

    //If we cannot find a cache-averse line, we evict the oldest cache-friendly line
    uint32_t max_rrip = 0;
    int32_t lru_victim = -1;
    for (uint32_t i=0; i<LLC_WAYS; i++)
    {
        if (rrpv[set][i] >= max_rrip)
        {
            max_rrip = rrpv[set][i];
            lru_victim = i;
        }
    }

    assert (lru_victim != -1);

    //TODO
    //The predictor is trained negatively on LRU evictions
/*  if( SAMPLED_SET(set) )
    {
//        if(prefetched[set][lru_victim])
//            config1.prefetch_predictor->decrement(signatures[set][lru_victim]);
//        else
//            config1.demand_predictor->decrement(signatures[set][lru_victim]);

        uint64_t paddr = (full_addr >> 6) << 6;
        bool hawkeye_hit = false;
        METADATA* detrain_info = NULL;
        int hawkeye_index = -1;
        hawkeye_index = (int)config1.hawkeyegen_rrpv_find_index(paddr, set, type, detrain_info, hawkeye_hit);
        assert(hawkeye_index < (int)LLC_WAYS);
        assert(hawkeye_index >= 0);
        if(detrain_info)
        {
            uint64_t evict_pc = detrain_info->pc;
            bool evict_prefetched = detrain_info->prefetched;

            assert(evict_pc == signatures[set][lru_victim]);
            assert(evict_prefetched == prefetched[set][lru_victim]);
            config1.hawkeye_detrain(evict_prefetched, evict_pc);
        }
    }
*/


    return lru_victim;

    // WE SHOULD NOT REACH HERE
    assert(0);
    return 0;
}

void replace_addr_history_element(uint32_t set)
{
    uint64_t lru_addr = 0;
    uint64_t lru_time = 10000000;

    for(map<uint64_t, ADDR_INFO>::iterator it=addr_history.begin(); it != addr_history.end(); it++)
    {
        if((it->second).last_quanta < lru_time)
        {
            lru_time =  (it->second).last_quanta;
            lru_addr = it->first;
        }
    }
    assert(lru_addr != 0);
    addr_history.erase(lru_addr);
}

uint64_t timer = 0;

uint64_t average_latency = 0;
uint64_t average_latency_count = 0;

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit, uint64_t latency, uint64_t effective_latency)
{
    uint64_t paddr = (full_addr >> 6) << 6;

    if(type == PREFETCH)
    {
        if (!hit)
            prefetched[set][way] = true;
    }
    else
        prefetched[set][way] = false;


    //First simulate Hawkeye's eviction (and detraining)
    bool hawkeye_hit = false;
    METADATA* detrain_info = NULL;
    int hawkeye_index = -1;
    if(SAMPLED_SET(set))
    {
        hawkeye_index = (int)config1.hawkeyegen_rrpv_find_index(cpu, paddr, set, type, detrain_info, hawkeye_hit);
        assert(hawkeye_index < (int)LLC_WAYS);
        assert(hawkeye_index >= 0);
        if(detrain_info)
        {
            uint64_t evict_pc = detrain_info->pc;
            bool evict_prefetched = detrain_info->prefetched;
            config1.hawkeye_detrain(evict_prefetched, evict_pc);
        }

        if(type == WRITEBACK)
        {
            assert(hawkeye_index >= 0);
            assert(hawkeye_index < LLC_WAYS);
            //assert(hawkeye_hit == (bool)hit);
            config1.simulate_hawkeyegen_rrpv_wb((uint32_t)hawkeye_index, paddr, set);
        }
    }


    //Ignore writebacks
    if (type == WRITEBACK)
        return;


    if(!hit) {
        average_latency += latency;
        average_latency_count += 1;
    }

    uint64_t curr_quanta = perset_mytimer[set];
    if(SAMPLED_SET(set))
    {
        //Train OPTgen 
        int last_quanta = -10;
        bool last_prefetched = false;
        uint64_t last_pc = 0;
        if(addr_history.find(paddr) != addr_history.end()) {
            last_quanta = addr_history[paddr].last_quanta;
            last_prefetched = addr_history[paddr].prefetched;
            last_pc = addr_history[paddr].PC;
        }

        assert((int)curr_quanta >= last_quanta);

        config1.train(set, type, curr_quanta, last_quanta, last_prefetched, last_pc, cpu);

        if(addr_history.find(paddr) == addr_history.end())
        {
#ifdef SAMPLING
            assert(addr_history.size() <= SAMPLED_CACHE_SIZE);
            if(addr_history.size() == SAMPLED_CACHE_SIZE) 
                replace_addr_history_element(set);

            assert(addr_history.size() < SAMPLED_CACHE_SIZE);
#endif
            addr_history[paddr].init(curr_quanta);
        }

        bool new_prediction = config1.predict(set, type, ip);

        assert(hawkeye_index >= 0);
        assert(hawkeye_index < LLC_WAYS);
        //assert(hawkeye_hit == (bool)hit);
        config1.simulate_hawkeyegen_rrpv((uint32_t)hawkeye_index, paddr, set, type, ip, new_prediction, hawkeye_hit);

        //Update Addr history
        addr_history[paddr].update(perset_mytimer[set], ip, new_prediction);
        if(type == PREFETCH)
            addr_history[paddr].mark_prefetch(); 
        else
            addr_history[paddr].prefetched = false; 
        addr_history[paddr].lru = 0;

    }

    //Make prediction and update RRPVs
    bool new_prediction = config1.predict(set, type, ip);
    signatures[set][way] = ip;
    perset_mytimer[set] = (perset_mytimer[set]+1);

    //Set RRIP values and age cache-friendly line
    if(!new_prediction)
        rrpv[set][way] = maxRRPV;
    else
    {
        rrpv[set][way] = 0;
        if(!hit)
        {
            bool saturated = false;
            for(uint32_t i=0; i<LLC_WAYS; i++)
                if (rrpv[set][i] == maxRRPV-1)
                    saturated = true;

            //Age all the cache-friendly  lines
            for(uint32_t i=0; i<LLC_WAYS; i++)
            {
                if (!saturated && rrpv[set][i] < maxRRPV-1)
                    rrpv[set][i]++;
            }
        }
        rrpv[set][way] = 0;
    }
}

// use this function to print out your own stats at the end of simulation
void CACHE::llc_replacement_final_stats()
{
    config1.print();
    cout << "Average latency: " << (double)average_latency/(double)average_latency_count << endl;
    return;
}
