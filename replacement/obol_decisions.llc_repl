//Obol Cache Replacement Tool v2.0
//UT AUSTIN RESEARCH LICENSE (SOURCE CODE)
//The University of Texas at Austin has developed certain software and documentation that it desires to
//make available without charge to anyone for academic, research, experimental or personal use.
//This license is designed to guarantee freedom to use the software for these purposes. If you wish to
//distribute or make other use of the software, you may purchase a license to do so from the University of
//Texas.
///////////////////////////////////////////////
//                                            //
//   Obol                                     //
//   Roshan Dathathri, roshan@cs.utexas.edu   //
//                                            //
///////////////////////////////////////////////

// Source code for configs 1 and 2

#include "cache.h"
#include <map>
#include <cassert>
#include <vector>
#include <deque>
#include <fstream>
#include <boost/serialization/map.hpp>
#include <boost/serialization/vector.hpp>
#include <boost/archive/binary_oarchive.hpp>
#include <boost/archive/binary_iarchive.hpp>

#define NUM_CORE 1
#define LLC_SETS NUM_CORE*2048
#define LLC_WAYS 16

//3-bit RRIP counters or all lines
#define maxRRPV 7
uint32_t rrpv[LLC_SETS][LLC_WAYS];

#ifndef OBOL_COST_RATIO
#define OBOL_COST_RATIO 2
#endif

#ifndef OBOL_COST_THRESHOLD
#define OBOL_COST_THRESHOLD 160
#endif


uint64_t perset_mytimer[LLC_SETS];

// Signatures for sampled sets; we only use 64 of these
// Budget = 64 sets * 16 ways * 12-bit signature per line = 1.5B
uint64_t signatures[LLC_SETS][LLC_WAYS];

// Hawkeye Predictors for demand and prefetch requests
// Predictor with 2K entries and 5-bit counter per entry
// Budget = 2048*5/8 bytes = 1.2KB
#define MAX_SHCT 31
#define SHCT_SIZE_BITS 11
#define SHCT_SIZE (1<<SHCT_SIZE_BITS)
#include "hawkeye_predictor.h"
HAWKEYE_PC_PREDICTOR* demand_predictor;  //Predictor

#include "optgen_simple.h"
OPTgen perset_optgen[LLC_SETS]; // per-set occupancy vectors; we only use 64 of these

#include <math.h>
#define bitmask(l) (((l) == 64) ? (unsigned long long)(-1LL) : ((1LL << (l))-1LL))
#define bits(x, i, l) (((x) >> (i)) & bitmask(l))

//#define SAMPLING
//Sample 64 sets per core
#ifdef SAMPLING
    #define SAMPLED_SET(set) (bits(set, 0 , 6) == bits(set, ((unsigned long long)log2(LLC_SETS) - 6), 6) )
#else
    #define SAMPLED_SET(set) (true)
#endif

// Sampler to track 8x cache history for sampled sets
// 2800 entris * 4 bytes per entry = 11.2KB
#define SAMPLED_CACHE_SIZE 2800
map<uint64_t, ADDR_INFO> addr_history; // Sampler

extern string outputDecisionFile;
map<uint64_t, vector<bool> > decisions;

map<uint64_t, unsigned> access_counter;
#define SATURATING_COUNTER 2
void init_access(uint64_t paddr) {
  access_counter[paddr] = SATURATING_COUNTER;
}
void update_high_cost_access(uint64_t paddr) {
  unsigned& counter = access_counter[paddr];
  if (counter < 3) ++counter;
}
void update_low_cost_access(uint64_t paddr) {
  unsigned& counter = access_counter[paddr];
  if (counter > 0) --counter;
}
bool predict_access_high_cost(uint64_t paddr) {
  unsigned& counter = access_counter[paddr];
  if (counter > 1) return true;
  return false;
}

extern string accessHistoryFile;

struct H_ENTRY {
  bool hit;
  uint64_t latency;
  uint64_t effective_latency;

  H_ENTRY() : hit(true), latency(0), effective_latency(0) {}

  H_ENTRY(bool _hit, uint64_t _latency, uint64_t _effective_latency) {
    hit = _hit;
    latency = _latency;
    effective_latency = _effective_latency;
  }

  template<typename Archive>
  void serialize(Archive& ar, const unsigned version) {
    ar & hit & latency & effective_latency;  // Simply serialize the data members of Obj
  }
};
map<uint64_t, vector<H_ENTRY> > access_history;
map<uint64_t, uint64_t> access_count;

struct Q_ENTRY
{
    uint64_t addr;
    uint64_t start_quanta;
    uint64_t end_quanta;

    Q_ENTRY(uint64_t _addr, uint64_t _start, uint64_t _end)
    {
        addr = _addr;
        start_quanta = _start;
        end_quanta = _end;
    }
};

vector<deque<Q_ENTRY> > high_cost_queues;
vector<deque<Q_ENTRY> > low_cost_queues;

//Statistics
uint32_t hawkeye_predictions;
uint32_t addr_history_hits;
uint32_t addr_history_miss;
uint32_t hawkeye_accuracy;
uint32_t mytimer;
uint64_t num_hits;
uint64_t num_unknown_hits;
uint64_t num_mismatched_hits;
uint64_t obol_total_cost;
uint64_t num_high_cost_misses;
uint64_t total_high_cost;
uint64_t num_low_cost_misses;
uint64_t total_low_cost;

// initialize replacement state
void CACHE::llc_initialize_replacement()
{
    {
        map<uint64_t, vector<H_ENTRY> > pc_history;
        assert(!accessHistoryFile.empty());
        ifstream trace(accessHistoryFile, ios::in | ios::binary);
        boost::archive::binary_iarchive iarch(trace);
        iarch & access_history & pc_history;
        trace.close();

        for (auto& it : access_history) {
          access_count[it.first] = 0;
        }
    }

    for (int i=0; i<LLC_SETS; i++) {
        for (int j=0; j<LLC_WAYS; j++) {
            rrpv[i][j] = maxRRPV;
            signatures[i][j] = 0;
        }
        perset_mytimer[i] = 0;
        perset_optgen[i].init(LLC_WAYS-2);
    }

    addr_history.clear();

    demand_predictor = new HAWKEYE_PC_PREDICTOR();

    high_cost_queues.resize(LLC_SETS);
    low_cost_queues.resize(LLC_SETS);

    hawkeye_predictions = 0;
    addr_history_hits = 0;
    addr_history_miss = 0;
    hawkeye_accuracy = 0;
    mytimer = 0;

    num_hits = 0;
    num_high_cost_misses = 0;
    total_high_cost = 0.0;
    num_low_cost_misses = 0;
    total_low_cost = 0.0;
    obol_total_cost = 0;
#ifdef SAMPLING
    assert(0);
    cout << "Initialize Obol state" << endl;
#else
    cout << "Initialize Obol state (sampling disabled)" << endl;
#endif
    cout << "Saturating counter size: " << SATURATING_COUNTER << endl;
    cout << "Cost ratio: " << OBOL_COST_RATIO << endl;
    cout << "Cost threshold: " << OBOL_COST_THRESHOLD << endl;
}

// find replacement victim
// return value should be 0 ~ 15 or 16 (bypass)
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
    // look for the maxRRPV line
    for (uint32_t i=0; i<LLC_WAYS; i++)
        if (rrpv[set][i] == maxRRPV)
            return i;

    //If we cannot find a cache-averse line, we evict the oldest cache-friendly line
    uint32_t max_rrip = 0;
    int32_t lru_victim = -1;
    for (uint32_t i=0; i<LLC_WAYS; i++)
    {
        if (rrpv[set][i] >= max_rrip)
        {
            max_rrip = rrpv[set][i];
            lru_victim = i;
        }
    }

    assert (lru_victim != -1);
    //The predictor is trained negatively on LRU evictions
    if( SAMPLED_SET(set) )
        demand_predictor->decrement(signatures[set][lru_victim]);
    return lru_victim;

    // WE SHOULD NOT REACH HERE
    assert(0);
    return 0;
}

void replace_addr_history_element()
{
    uint64_t lru_addr = 0;
    uint64_t lru_time = 10000000;
    
    for(map<uint64_t, ADDR_INFO>::iterator it=addr_history.begin(); it != addr_history.end(); it++)
    {
        if((it->second).last_quanta < lru_time)
        {
            lru_time =  (it->second).last_quanta;
            lru_addr = it->first;
        }
    }
    assert(lru_addr != 0);
    addr_history.erase(lru_addr);
}

bool is_cost_high(double effective_latency)
{
    if (effective_latency > OBOL_COST_THRESHOLD) return true;
    return false;
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit, uint64_t latency, uint64_t effective_latency)
{
    uint64_t paddr = (full_addr >> 6) << 6;
    if (type == WRITEBACK)
        return;

    auto it = decisions.find(paddr);
    if (it == decisions.end()) {
      decisions[paddr] = vector<bool>();
    }
    
    auto it2 = access_counter.find(paddr);
    if (it2 == access_counter.end()) {
      init_access(paddr);
    }

    bool history_found = access_history.find(paddr) != access_history.end();
    if (history_found) assert(access_count.find(paddr) != access_count.end());

    // statistics
    if (hit) {
        assert(effective_latency == 0.0);
        ++num_hits;
        if (history_found) {
          auto index = access_count[paddr];
          if (index >= access_history[paddr].size()) {
            ++num_unknown_hits;
            index = access_history[paddr].size() - 1;
          }
          effective_latency = access_history[paddr][index].effective_latency;
          auto predicted_latency = access_history[paddr][index].effective_latency;
          if (predict_access_high_cost(paddr) != is_cost_high(predicted_latency)) {
            ++num_mismatched_hits;
          }
        }
    } else {
        if (is_cost_high(effective_latency)) {
            ++num_high_cost_misses;
            total_high_cost += effective_latency;
            update_high_cost_access(paddr);
        } else {
            ++num_low_cost_misses;
            total_low_cost += effective_latency;
            update_low_cost_access(paddr);
        }
    }
    if (history_found) ++access_count[paddr];

    mytimer++;

    //If we are sampling, OPTgen will only see accesses from sampled sets
    if(SAMPLED_SET(set))
    {
            //cout << hex << paddr << dec << endl;
        auto& high_cost_queue = high_cost_queues[set];
        auto& low_cost_queue = low_cost_queues[set];
        auto& optgen = perset_optgen[set];
        uint64_t curr_quanta = perset_mytimer[set];

        if(addr_history.find(paddr) != addr_history.end())
        {
            addr_history_hits++;
            hawkeye_predictions++;
            bool is_high_cost_predicted = addr_history[paddr].is_high_cost_predicted;
            bool is_high_cost;
#ifdef NO_COST_PREDICTED_CORRECTION
            is_high_cost = is_high_cost_predicted;
#else
            if (hit) {
                is_high_cost = predict_access_high_cost(paddr);
            } else {
                is_high_cost = is_cost_high(effective_latency);
            }

            if (!is_high_cost && is_high_cost_predicted) { // false negative prediction
                // remove from the high-cost queue
                for (auto it = high_cost_queue.begin(); it != high_cost_queue.end(); ++it) {
                    if (it->addr == paddr) {
                        high_cost_queue.erase(it);
                        break;
                    }
                }
            }
#endif
            uint64_t last_quanta = addr_history[paddr].last_quanta;
            assert(curr_quanta >= addr_history[paddr].last_quanta);

            if (is_high_cost) {
                if(optgen.should_cache(curr_quanta, last_quanta))
                {
                    demand_predictor->increment(addr_history[paddr].PC);
                    decisions[paddr].push_back(true);
                    if(addr_history[paddr].last_prediction)
                        hawkeye_accuracy++;
                }
                else
                {
                    //Train the predictor negatively because OPT would not have cached this line
                    demand_predictor->decrement(addr_history[paddr].PC);
                    decisions[paddr].push_back(false);
                    if(addr_history[paddr].last_prediction == false)
                        hawkeye_accuracy++;

                    obol_total_cost += ((hit) ? (addr_history[paddr].last_miss_cost) : (effective_latency));
                }


                for (auto it = high_cost_queue.begin(); it != high_cost_queue.end(); ++it) {
                    if (it->addr == paddr) {
                        high_cost_queue.erase(it);
                        break;
                    }
                }

                uint64_t high_cost_start = curr_quanta;
                if (!high_cost_queue.empty()) high_cost_start = high_cost_queue[0].start_quanta;
                while (!low_cost_queue.empty()) { // retire non competing lines
                    auto& low_cost_line = low_cost_queue.front();
                    if (low_cost_line.end_quanta < high_cost_start) {
                        if (optgen.should_cache(low_cost_line.end_quanta, low_cost_line.start_quanta)) {
                            if (addr_history.find(low_cost_line.addr) != addr_history.end()) {
                                demand_predictor->increment(addr_history[low_cost_line.addr].PC);
                                decisions[low_cost_line.addr].push_back(true);
                                if(addr_history[low_cost_line.addr].last_prediction)
                                    hawkeye_accuracy++;
                            }
                        } else {
                            if (addr_history.find(low_cost_line.addr) != addr_history.end()) {
                                demand_predictor->decrement(addr_history[low_cost_line.addr].PC);
                                decisions[low_cost_line.addr].push_back(false);
                                if(addr_history[low_cost_line.addr].last_prediction == false)
                                    hawkeye_accuracy++;
                                obol_total_cost += addr_history[low_cost_line.addr].last_miss_cost;
                            }
                        }
                        low_cost_queue.pop_front();
                    } else {
                        break;
                    }
                }
            } else {
                if (high_cost_queue.empty()) { // not competing
                    assert(low_cost_queue.empty());
                    if (optgen.should_cache(curr_quanta, last_quanta)) {
                        demand_predictor->increment(addr_history[paddr].PC);
                        decisions[paddr].push_back(true);
                        if(addr_history[paddr].last_prediction)
                            hawkeye_accuracy++;
                    } else {
                        demand_predictor->decrement(addr_history[paddr].PC);
                        decisions[paddr].push_back(false);
                        if(addr_history[paddr].last_prediction == false)
                            hawkeye_accuracy++;
                    
                        obol_total_cost += ((hit) ? (addr_history[paddr].last_miss_cost) : (effective_latency));
                    }
                } else { // competing with high_cost line
                    Q_ENTRY new_interval(paddr, last_quanta, curr_quanta);
                    low_cost_queue.push_back(new_interval);

                    if (low_cost_queue.size() >= OBOL_COST_RATIO) {
                        // check if they can offset high cost line
                        uint64_t num_low_cost_candidates = 0;
                        for (auto& low_cost_line : low_cost_queue) {
                            if (optgen.should_cache_tentative(low_cost_line.end_quanta, low_cost_line.start_quanta)) {
                                ++num_low_cost_candidates;
                            }
                            if (num_low_cost_candidates == OBOL_COST_RATIO) {
                                break;
                            }
                        }
                        optgen.revert_to_checkpoint();

                        if (num_low_cost_candidates == OBOL_COST_RATIO) {
                            uint64_t num_low_cost_cached = 0;
                            while (!low_cost_queue.empty()) {
                                auto& low_cost_line = low_cost_queue.front();
                                if (optgen.should_cache(low_cost_line.end_quanta, low_cost_line.start_quanta)) {
                                    ++num_low_cost_cached;
                                    if (addr_history.find(low_cost_line.addr) != addr_history.end()) {
                                        demand_predictor->increment(addr_history[low_cost_line.addr].PC);
                                        decisions[low_cost_line.addr].push_back(true);
                                        if(addr_history[low_cost_line.addr].last_prediction)
                                            hawkeye_accuracy++;
                                    }
                                } else {
                                    if (addr_history.find(low_cost_line.addr) != addr_history.end()) {
                                        demand_predictor->decrement(addr_history[low_cost_line.addr].PC);
                                        decisions[low_cost_line.addr].push_back(false);
                                        if(addr_history[low_cost_line.addr].last_prediction == false)
                                            hawkeye_accuracy++;
                                
                                        obol_total_cost += addr_history[low_cost_line.addr].last_miss_cost;
                                    }
                                }
                                low_cost_queue.pop_front();
                                if (num_low_cost_cached == OBOL_COST_RATIO) {
                                    break;
                                }
                            }
                        } // else: wait till more low cost lines can be cached
                    } // else: wait till there are more competing lines
                }
            }
            //Some maintenance operations for OPTgen
            optgen.add_access(curr_quanta);
        }
        // This is the first time we are seeing this line
        else
        {
#ifdef SAMPLING
            // Find a victim from the sampled cache if we are sampling
            assert(addr_history.size() <= SAMPLED_CACHE_SIZE);
            if(addr_history.size() == SAMPLED_CACHE_SIZE) 
                replace_addr_history_element();
            assert(addr_history.size() < SAMPLED_CACHE_SIZE);
#endif
            addr_history_miss++;
            //Initialize a new entry in the sampler
            addr_history[paddr].init(curr_quanta);
            optgen.add_access(curr_quanta);
            obol_total_cost += ((hit) ? (addr_history[paddr].last_miss_cost) : (effective_latency));
        }

        bool is_next_high_cost;
#ifdef CURRENT_COST_PREDICTION
        if (hit) {
            is_next_high_cost = predict_access_high_cost(paddr);
        } else {
            is_next_high_cost = is_cost_high(effective_latency);
        }
#else   
        is_next_high_cost = true;
#endif

        // Get Hawkeye's prediction for this line
        bool new_prediction = demand_predictor->get_prediction (ip);

        // Update the sampler with the timestamp, PC and our prediction
        addr_history[paddr].update(curr_quanta, ip, new_prediction, is_next_high_cost);
        addr_history[paddr].lru = 0;
        if(!hit)
            addr_history[paddr].last_miss_cost = effective_latency;

        //Increment the set timer
        perset_mytimer[set] = (perset_mytimer[set]+1);

        if (is_next_high_cost) {
            Q_ENTRY new_interval(paddr, curr_quanta, 0);
            high_cost_queue.push_back(new_interval);
        }
    }
    else
        cout << "not sampled" << endl;
        

    bool new_prediction = demand_predictor->get_prediction (ip);

    signatures[set][way] = ip;

    //Set RRIP values and age cache-friendly line
    if(!new_prediction)
        rrpv[set][way] = maxRRPV;
    else
    {
        rrpv[set][way] = 0;
        if(!hit)
        {
            bool saturated = false;
            for(uint32_t i=0; i<LLC_WAYS; i++)
                if (rrpv[set][i] == maxRRPV-1)
                    saturated = true;

            //Age all the cache-friendly  lines
            for(uint32_t i=0; i<LLC_WAYS; i++)
            {
                if (!saturated && rrpv[set][i] < maxRRPV-1)
                    rrpv[set][i]++;
            }
        }
        rrpv[set][way] = 0;
    }
}

// use this function to print out your own stats at the end of simulation
void CACHE::llc_replacement_final_stats()
{
    if (!outputDecisionFile.empty()) {
      ofstream decisionOutput(outputDecisionFile, ios::out | ios::binary);
      boost::archive::binary_oarchive oarch(decisionOutput);
      oarch << decisions;
      decisionOutput.close();
      cout << "Decisions written to: " << outputDecisionFile << endl;
    }

    unsigned int hits = 0;
    unsigned int accesses = 0;
    unsigned int traffic = 0;
    for(unsigned int i=0; i<LLC_SETS; i++)
    {
        while(!(low_cost_queues[i].empty()))
        {
            Q_ENTRY oldest_lc_entry = low_cost_queues[i].front();
            uint64_t  start_quanta = oldest_lc_entry.start_quanta;
            uint64_t  end_quanta = oldest_lc_entry.end_quanta;
            if(perset_optgen[i].should_cache(end_quanta, start_quanta)) // Yes! 
            {
            }
            else
            {
                obol_total_cost += addr_history[oldest_lc_entry.addr].last_miss_cost;
            }
            low_cost_queues[i].pop_front();
        }
        
        accesses += perset_optgen[i].access;
        hits += perset_optgen[i].get_num_opt_hits();
        traffic += perset_optgen[i].get_traffic();
    }

    std::cout << "OPTgen accesses: " << accesses << std::endl;
    std::cout << "OPTgen hits: " << hits << std::endl;
    std::cout << "OPTgen hit rate: " << 100*(double)hits/(double)accesses << std::endl;
    std::cout << "OPTgen cost: " << obol_total_cost << std::endl;
    std::cout << "Traffic: " << traffic << " " << 100*(double)traffic/(double)accesses << std::endl;
    double prediction_accuracy = 100*(double)hawkeye_accuracy/(double)hawkeye_predictions;
    std::cout << "Hawkeye accuracy: " << hawkeye_accuracy << " out of " << hawkeye_predictions << " : " << prediction_accuracy << std::endl;

    double num_accesses = (num_hits+num_high_cost_misses+num_low_cost_misses);
    double num_misses = num_high_cost_misses + num_low_cost_misses;
    std::cout << "Num accesses: " << num_accesses << std::endl;
    double hit_rate = 100*num_hits/num_accesses;
    std::cout << "Hit rate: " << hit_rate << std::endl;
    double high_cost_miss_rate = 100*num_high_cost_misses/num_accesses;
    std::cout << "High cost miss rate: " << high_cost_miss_rate << std::endl;
    double low_cost_miss_rate = 100*num_low_cost_misses/num_accesses;
    std::cout << "Low cost miss rate: " << low_cost_miss_rate << std::endl;

    double total_cost = total_high_cost+total_low_cost;
    std::cout << "Total cost: " << (uint64_t)total_cost << std::endl;
    double high_cost_contribution = 100*total_high_cost/total_cost;
    std::cout << "Cost contribution of high cost misses: " << high_cost_contribution << std::endl;
    double low_cost_contribution = 100*total_low_cost/total_cost;
    std::cout << "Cost contribution of low cost misses: " << low_cost_contribution << std::endl;
    std::cout << "Percentage of high cost misses: " << 100*num_high_cost_misses/num_misses << std::endl;
    std::cout << "Percentage of low cost misses: " << 100*num_low_cost_misses/num_misses << std::endl;
    std::cout << "Average cost of a miss: " << total_cost/num_misses << std::endl;
    std::cout << "Average cost of a high cost miss: " << (double)total_high_cost/num_high_cost_misses << std::endl;
    std::cout << "Average cost of a low cost miss: " << (double)total_low_cost/num_low_cost_misses << std::endl;

    double unknown_hit_rate = 100 * (double) num_unknown_hits / num_hits;
    std::cout << "Percentages of hits whose cost was not known: " << unknown_hit_rate << std::endl;
    double mismatched_rate = 100 * (double) num_mismatched_hits / num_hits;
    std::cout << "Percentages of hits whose cost did not match: " << mismatched_rate << std::endl;

    std::cout << "\n\nCache_sets,Associativity,Cost_threshold,Cost_ratio,Benchmark,IPC,Accesses,Hit_rate,High_cost_miss_rate,Low_cost_miss_rate,Total_cost,High_cost_contribution,Low_cost_contribution,Prediction_accuracy\n";
    std::cout << LLC_SETS << "," << LLC_WAYS << "," << OBOL_COST_THRESHOLD << "," << OBOL_COST_RATIO << ",,," << num_accesses << "," << hit_rate << "," << high_cost_miss_rate << "," << low_cost_miss_rate << "," << (uint64_t)total_cost << "," << high_cost_contribution << "," << low_cost_contribution << "," << prediction_accuracy << "\n\n\n";

    cout << endl << endl;
    return;
}
