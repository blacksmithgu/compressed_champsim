#include "cache.h"
#include "compression_tracker.h"

#include <iomanip>
#include <stdint.h>

// Counts the total number of cache lines stored in the cache; this can be greater than the number of ways,
// since we're using a compressed cache.
uint64_t total_cache_lines_stored = 0;

// A "sum of sums" - is the sum of the total cache lines stored each insertion/deletion; dividing this by the total
// number of accesses gives the average utilization of the cache over the course of the program.
uint64_t total_cache_lines_stored_over_time = 0;

// The total number of accesses to the cache as a whole.
uint64_t num_accesses = 0;

// Tracker used for printing out compressibility stats.
CompressionTracker compression_tracker;

/**
 * Called to initialize the LLC replacement policy state.
 */
void CACHE::llc_initialize_replacement() { }

uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip,
    uint64_t full_addr, uint32_t type) {
    std::cerr << "Normal find victim also called..." << std::endl;

    // An assert() is legitimate here instead of an exit(), because this should never happen.
    assert(0);
    return 0;
}

void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip,
    uint64_t victim_addr, uint32_t type, uint8_t hit, uint64_t latency, uint64_t effective_latency) {
    std::cout << "Normal Update replacement state called..." << std::endl;

    // Assert is valid here as this should never happen.
    assert(0);
}

void CACHE::llc_replacement_final_stats() {
    // Compute average utilization as a percentage between 0 - 400%.
    double utilization = double(total_cache_lines_stored_over_time) / double(num_accesses * LLC_SET * LLC_WAY);
    
    std::cout << std::endl << std::endl;
    std::cout << "Total Accesses: " << num_accesses << std::endl;
    std::cout << "Average Utilization (0% - 400%): " << std::fixed << std::setprecision(5) << (utilization * 100.0) << "%" << std::endl;
    std::cout << std::endl;
    compression_tracker.print();
}

uint32_t CACHE::llc_find_victim_cc(uint32_t cpu, uint64_t instr_id, uint32_t set, const COMPRESSED_CACHE_BLOCK *current_set,
        uint64_t ip, uint64_t full_addr, uint32_t type, uint64_t incoming_cf, uint64_t incoming_size,
        uint32_t& evicted_compressed_index) {
    // 1st Variant: Look for empty/invalid space in a superblock line.
    // If this succeeds, # of total cache lines stored does not change.
    for(uint32_t way = 0; way < LLC_WAY; way++) {
        // Ignore lines w/ a different superblock.
        if(current_set[way].sbTag != get_sb_tag(full_addr >> LOG2_BLOCK_SIZE)) continue;

        // Ignore lines of a different compression factor.
        if(current_set[way].compressionFactor != incoming_cf) continue;

        for(uint32_t compression_index = 0; compression_index < current_set[way].compressionFactor; compression_index++) {
            // Ignore valid lines.
            if(current_set[way].valid[compression_index]) continue;

            // We've found an invalid line, return it.
            evicted_compressed_index = compression_index;
            total_cache_lines_stored++;
            return way;
        }
    }

    // 2nd Variant: Look for a plain invalid way.
    // Number of total cache lines increases by one.
    for(uint32_t way = 0; way < LLC_WAY; way++) {
        // Valid ways have CF > 0.
        if(current_set[way].compressionFactor != 0) continue;

        // Otherwise, we found a line.
        evicted_compressed_index = 4;
        total_cache_lines_stored++;
        return way;
    }

    //Step 3: Evict a superblock using LRU.
    uint32_t max_lru = 0;
    uint32_t victim = 0;
    for (uint32_t way = 0; way < NUM_WAY; way++) {
        if (current_set[way].lru > max_lru) {
            max_lru = current_set[way].lru;
            victim = way;
        }
    }

    // Count the number of valid lines in the evicted way, and remove those from total lines stored, and add in the new
    // line.
    total_cache_lines_stored++;
    for(uint32_t compression_index = 0; compression_index < current_set[victim].compressionFactor; compression_index++) {
        if(current_set[victim].valid[compression_index]) total_cache_lines_stored--;
    }

    evicted_compressed_index = 4;
    return victim;
}

void CACHE::llc_update_replacement_state_cc(uint32_t cpu, uint32_t set, uint32_t way, uint32_t compressed_index, uint64_t full_addr,
        uint64_t ip, uint64_t victim_addr, uint32_t type, uint32_t cf, uint32_t compressed_size, uint8_t hit,
        uint64_t latency, uint64_t effective_latency) {
    // Writeback hit does not update LRU state
    if (type == WRITEBACK && hit) return;

    // Sum the total size of the cache & increment number of accesses.
    num_accesses++;
    total_cache_lines_stored_over_time += total_cache_lines_stored;

    // Add this line to the # of compressible lines.
    compression_tracker.increment(cf);

    // Age all other lines.
    for (uint32_t i=0; i<NUM_WAY; i++) {
        // Skip invalid lines.
        if(compressed_cache_block[set][i].compressionFactor == 0) continue;

        // Age all lines younger than the accessed line.
        if (compressed_cache_block[set][i].lru < compressed_cache_block[set][way].lru)
            compressed_cache_block[set][i].lru++;
    }

    compressed_cache_block[set][way].lru = 0; // promote to the MRU position
}
