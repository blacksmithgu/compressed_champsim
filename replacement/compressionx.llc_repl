#include <stdint.h>

#include "cache.h"
#include "size_aware_optgen.h"
#include "compression_tracker.h"

#include <map>

#ifndef CACHEGEN
    #define CACHEGEN OPTgen<1024>
#endif

// Tracker used for printing out compressibility stats.
CompressionTracker compression_tracker;

// The OPTgen (or similar) vectors for checking performance.
CACHEGEN cachegens[LLC_SET];

// The number of accesses per-set.
uint64_t num_accesses[LLC_SET] = {0};

// Map of address -> time quanta that the address was accessed.
map<uint64_t, uint64_t> outstanding_accesses;

// Number of hits/misses that the cachegen vectors report.
uint64_t cachegen_hits = 0, cachegen_misses = 0;

// Command line argument set in src/main.cc (horrible, I know).
extern double benchmark_compression_ratio;

/**
 * Called to initialize the LLC replacement policy state.
 */
void CACHE::llc_initialize_replacement() {
    for(int set = 0; set < LLC_SET; set++) cachegens[set] = CACHEGEN(std::ceil(LLC_WAY * benchmark_compression_ratio));
}

uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip,
    uint64_t full_addr, uint32_t type) {
    std::cerr << "Normal find victim also called, this should not happen..." << std::endl;

    // An assert() is legitimate here instead of an exit(), because this should never happen.
    assert(0);
    return 0;
}

void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip,
    uint64_t victim_addr, uint32_t type, uint8_t hit, uint64_t latency, uint64_t effective_latency) {
    std::cout << "Normal Update replacement state called, this should not happen..." << std::endl;

    // Assert is valid here as this should never happen.
    assert(0);
}

void CACHE::llc_replacement_final_stats() {
    // Remaining outstanding accesses are misses.

    double hitrate = cachegen_hits / double(cachegen_hits + cachegen_misses);

    printf("Total Decisions: %ld\n", cachegen_hits + cachegen_misses);
    printf("Decisions Made: %ld hits / %ld misses (%.2f hit rate)\n\n", cachegen_hits, cachegen_misses, hitrate);

    compression_tracker.print();
}

uint32_t CACHE::llc_find_victim_cc(uint32_t cpu, uint64_t instr_id, uint32_t set, const COMPRESSED_CACHE_BLOCK *current_set,
        uint64_t ip, uint64_t full_addr, uint32_t type, uint64_t incoming_cf, uint32_t& evicted_compressed_index) {
    // 1st Variant: Look for empty/invalid space in a superblock line.
    // If this succeeds, # of total cache lines stored does not change.
    for(uint32_t way = 0; way < LLC_WAY; way++) {
        // Ignore lines w/ a different superblock.
        if(current_set[way].sbTag != get_sb_tag(full_addr >> LOG2_BLOCK_SIZE)) continue;

        // Ignore lines of a different compression factor.
        if(current_set[way].compressionFactor != incoming_cf) continue;

        for(uint32_t compression_index = 0; compression_index < current_set[way].compressionFactor; compression_index++) {
            // Ignore valid lines.
            if(current_set[way].valid[compression_index]) continue;

            // We've found an invalid line, return it.
            evicted_compressed_index = compression_index;
            return way;
        }
    }

    // 2nd Variant: Look for a plain invalid way.
    // Number of total cache lines increases by one.
    for(uint32_t way = 0; way < LLC_WAY; way++) {
        // Valid ways have CF > 0.
        if(current_set[way].compressionFactor != 0) continue;

        // Otherwise, we found a line.
        evicted_compressed_index = 4;
        return way;
    }

    //Step 3: Evict a superblock using LRU.
    uint32_t max_lru = 0;
    uint32_t victim = 0;
    for (uint32_t way = 0; way < NUM_WAY; way++) {
        if (current_set[way].lru > max_lru) {
            max_lru = current_set[way].lru;
            victim = way;
        }
    }

    evicted_compressed_index = 4;
    return victim;
}

void CACHE::llc_update_replacement_state_cc(uint32_t cpu, uint32_t set, uint32_t way, uint32_t compressed_index, uint64_t full_addr, uint64_t ip,
        uint64_t victim_addr, uint32_t type, uint32_t cf, uint8_t hit, uint64_t latency, uint64_t effective_latency) {
    // Writeback hit does not update LRU state
    if (type == WRITEBACK && hit) return;

    // Add this line to the # of compressible lines.
    compression_tracker.increment(cf);

    // Age all other lines.
    for (uint32_t i=0; i<NUM_WAY; i++) {
        // Skip invalid lines.
        if(compressed_cache_block[set][i].compressionFactor == 0) continue;

        // Age all lines younger than the accessed line.
        if (compressed_cache_block[set][i].lru < compressed_cache_block[set][way].lru)
            compressed_cache_block[set][i].lru++;
    }

    compressed_cache_block[set][way].lru = 0; // promote to the MRU position

    // Leech off of the LLC access trace here for implementing the heuristic.
    // For the heuristic, check if we've seen this access before, and if so, pass it to the OPTgen vector.
    uint64_t line_addr = full_addr & ~(BLOCK_SIZE - 1);

    // If we've seen an access to this cache line before, then update Optgen and output this cache access.
    auto access_iter = outstanding_accesses.find(line_addr);
    if(access_iter != outstanding_accesses.end()) {
        uint64_t access_time = access_iter->second;

        // Record the access in Optgen to get the hit/miss decision, and then increment the appropriate counters.
        bool decision = cachegens[set].try_cache(access_time, num_accesses[set], line_addr, 1);

        if(decision) cachegen_hits++;
        else cachegen_misses++;
    }

    outstanding_accesses[line_addr] = num_accesses[set];
    num_accesses[set]++;
}
