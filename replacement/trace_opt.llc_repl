////////////////////////////////////////////
//                                        //
//    Trace-based replacement policy      //
// Roshan Dathathri, roshan@cs.utexas.edu //
//                                        //
////////////////////////////////////////////

#include "cache.h"
#include <map>
#include <vector>
#include <fstream>
#include <sstream>
#include <boost/serialization/map.hpp>
#include <boost/serialization/vector.hpp>
#include <boost/archive/binary_iarchive.hpp>

#define NUM_CORE 1
#define LLC_SETS NUM_CORE*2048
#define LLC_WAYS 16

extern string outputDecisionFile;
map<uint64_t, vector<bool> > decisions; // TODO use a queue instead of vector

uint32_t lru[LLC_SETS][LLC_WAYS];
bool valid[LLC_SETS][LLC_WAYS];
bool opt_predictions[LLC_SETS][LLC_WAYS];

uint64_t num_hits;
uint64_t num_high_cost_misses;
uint64_t total_high_cost;
uint64_t num_low_cost_misses;
uint64_t total_low_cost;

#ifndef OBOL_COST_THRESHOLD
#define OBOL_COST_THRESHOLD 80
#endif



// initialize replacement state
void CACHE::llc_initialize_replacement()
{
    cout << "Initialize LRU replacement state" << endl;
    for (int i=0; i<LLC_SETS; i++) {
        for (int j=0; j<LLC_WAYS; j++) {
            valid[i][j] = false;
            lru[i][j] = j;
            opt_predictions[i][j] = 0;
        }
    }

    assert(!outputDecisionFile.empty());
    ifstream decisionOutput(outputDecisionFile, ios::in | ios::binary);
    boost::archive::binary_iarchive iarch(decisionOutput);
    iarch >> decisions;
    decisionOutput.close();

    num_hits = 0;
    num_high_cost_misses = 0;
    total_high_cost = 0.0;
    num_low_cost_misses = 0;
    total_low_cost = 0.0;

}

bool is_cost_high(double effective_latency)
{
    if (effective_latency > OBOL_COST_THRESHOLD) return true;
    return false;
}



// find replacement victim
// return value should be 0 ~ 15 or 16 (bypass)
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
    for (int i=0; i<LLC_WAYS; i++)
        if(valid[set][i] == false)
            return i;

    for (int i=0; i<LLC_WAYS; i++)
        if(opt_predictions[set][i] == false)
            return i;

    for (int i=0; i<LLC_WAYS; i++)
        if (lru[set][i] == (LLC_WAYS-1))
            return i;

    return 0;
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit, uint64_t latency, uint64_t effective_latency)
{
    valid[set][way] = true;
    if(type == WRITEBACK)
        return;

    uint64_t paddr = (full_addr >> 6) << 6;

    if (hit) {
        assert(effective_latency == 0.0);
        ++num_hits;
    } else {
        if (is_cost_high(effective_latency)) {
            ++num_high_cost_misses;
            total_high_cost += effective_latency;
        } else {
            ++num_low_cost_misses;
            total_low_cost += effective_latency;
        }
    }


    // update lru replacement state
    for (uint32_t i=0; i<LLC_WAYS; i++) {
        if (lru[set][i] < lru[set][way]) {
            lru[set][i]++;

            if (lru[set][i] == LLC_WAYS)
                assert(0);
        }
    }
    lru[set][way] = 0; // promote to the MRU position


    if(decisions.find(paddr) != decisions.end())
    {
        if(decisions[paddr].size() != 0)
        {
            opt_predictions[set][way] = decisions[paddr][0];  
            decisions[paddr].erase(decisions[paddr].begin());
        }
        else // No further reuse
        {
            opt_predictions[set][way] = false;
        }
    }
    else
    {
        opt_predictions[set][way] = false;
    }
}

// use this function to print out your own stats at the end of simulation
void CACHE::llc_replacement_final_stats()
{
    double num_misses = num_high_cost_misses + num_low_cost_misses;
double total_cost = total_high_cost+total_low_cost;
    std::cout << "Total cost: " << (uint64_t)total_cost << std::endl;
    double high_cost_contribution = 100*total_high_cost/total_cost;
    std::cout << "Cost contribution of high cost misses: " << high_cost_contribution << std::endl;
    double low_cost_contribution = 100*total_low_cost/total_cost;
    std::cout << "Cost contribution of low cost misses: " << low_cost_contribution << std::endl;
    std::cout << "Average cost of a miss: " << total_cost/num_misses << std::endl;
    std::cout << "Average cost of a high cost miss: " << (double)total_high_cost/num_high_cost_misses << std::endl;
    std::cout << "Average cost of a low cost miss: " << (double)total_low_cost/num_low_cost_misses << std::endl;


}
