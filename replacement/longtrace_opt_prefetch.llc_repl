////////////////////////////////////////////
//                                        //
//    Trace-based replacement policy      //
// Roshan Dathathri, roshan@cs.utexas.edu //
//                                        //
////////////////////////////////////////////

#include "cache.h"
#include <map>
#include <vector>
#include <fstream>
#include <sstream>
#include <boost/serialization/map.hpp>
#include <boost/serialization/vector.hpp>
#include <boost/archive/binary_iarchive.hpp>
#include <stdlib.h>     /* srand, rand */
#include <time.h>       /* time */
#define NUM_CORE 1
#define LLC_SETS NUM_CORE*2048
#define LLC_WAYS 16

extern string outputDecisionFile;
map<uint64_t, vector<bool> > decisions; // TODO use a queue instead of vector
map<uint64_t, vector<bool> > prefetch_decisions; // TODO use a queue instead of vector
map<uint64_t, vector<bool> > prefetch_fake_hit; // TODO use a queue instead of vector

uint32_t lru[LLC_SETS][LLC_WAYS];
bool valid[LLC_SETS][LLC_WAYS];
bool opt_predictions[LLC_SETS][LLC_WAYS];

uint64_t num_hits;
uint64_t num_high_cost_misses;
uint64_t total_high_cost;
uint64_t num_low_cost_misses;
uint64_t total_low_cost;

extern unsigned obol_cost_threshold;
void read_opt_decisions(string filename);

#define ACCURACY 100
unsigned int predictions;
unsigned int inaccurate;
unsigned int fake_hits;
// initialize replacement state
void CACHE::llc_initialize_replacement()
{
    cout << "Initialize LRU replacement state" << endl;
    for (int i=0; i<LLC_SETS; i++) {
        for (int j=0; j<LLC_WAYS; j++) {
            valid[i][j] = false;
            lru[i][j] = j;
            opt_predictions[i][j] = 0;
        }
    }

    decisions.clear();
    prefetch_decisions.clear();
    read_opt_decisions(outputDecisionFile);
    num_hits = 0;
    num_high_cost_misses = 0;
    total_high_cost = 0.0;
    num_low_cost_misses = 0;
    total_low_cost = 0.0;

    //srand (time(NULL));
    predictions = 0;
    inaccurate = 0;
    fake_hits = 0;

    cout << "Initialize trace opt: " << outputDecisionFile << endl;
    cout << "Cost threshold: " << obol_cost_threshold << endl;
}

bool is_cost_high(double effective_latency)
{
    if (effective_latency > obol_cost_threshold) return true;
    return false;
}

bool CACHE::is_fake_hit(uint64_t full_addr)
{
    uint64_t paddr = (full_addr >> 6) << 6;

//    cout << "Checking fake hit: " << hex << paddr << dec << endl;
    return false;
    if(prefetch_fake_hit.find(paddr) != prefetch_fake_hit.end())
    {
        if(prefetch_fake_hit[paddr].size() != 0)
        {
            fake_hits++;
            prefetch_fake_hit[paddr].erase(prefetch_fake_hit[paddr].begin());
            return true;
        }
    }

    return false;
}

bool morph(bool real_prediction)
{
    predictions++;
    unsigned int rnum = predictions % 100;
    if(rnum > ACCURACY)
    {
        inaccurate++;
        return (!real_prediction);
    }

    return real_prediction;
}

// find replacement victim
// return value should be 0 ~ 15 or 16 (bypass)
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
    for (int i=0; i<LLC_WAYS; i++)
        if(valid[set][i] == false)
            return i;

    for (int i=0; i<LLC_WAYS; i++){
        if(opt_predictions[set][i] == false) {
    //        cout << "OPT" << endl;
            return i;
        }
    }

//    assert(0);
//    cout << "LRU" << endl;
    for (int i=0; i<LLC_WAYS; i++)
        if (lru[set][i] == (LLC_WAYS-1))
            return i;

    return 0;
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit, uint64_t latency, uint64_t effective_latency)
{
    valid[set][way] = true;
    if(type == WRITEBACK)
        return;

    uint64_t paddr = (full_addr >> 6) << 6;

    if (hit) {
        assert(effective_latency == 0.0);
        ++num_hits;
    } else {
        if (is_cost_high(effective_latency)) {
            ++num_high_cost_misses;
            total_high_cost += effective_latency;
        } else {
            ++num_low_cost_misses;
            total_low_cost += effective_latency;
        }
    }


    // update lru replacement state
    for (uint32_t i=0; i<LLC_WAYS; i++) {
        if (lru[set][i] < lru[set][way]) {
            lru[set][i]++;

            if (lru[set][i] == LLC_WAYS)
                assert(0);
        }
    }
    lru[set][way] = 0; // promote to the MRU position


    if(type == PREFETCH)
    {
        if(prefetch_decisions.find(paddr) != prefetch_decisions.end())
        {
            if(prefetch_decisions[paddr].size() != 0)
            {
                opt_predictions[set][way] = morph(prefetch_decisions[paddr][0]);  
                prefetch_decisions[paddr].erase(prefetch_decisions[paddr].begin());
            }
            else // No further reuse
            {
                opt_predictions[set][way] = morph(false);
            }
        }
        else
        {
            opt_predictions[set][way] = morph(false);
        }
    }
    else 
    {
        if(decisions.find(paddr) != decisions.end())
        {
            if(decisions[paddr].size() != 0)
            {
                opt_predictions[set][way] = morph(decisions[paddr][0]);  
                decisions[paddr].erase(decisions[paddr].begin());
            }
            else // No further reuse
            {
                opt_predictions[set][way] = morph(false);
            }
        }
        else
        {
            opt_predictions[set][way] = morph(false);
        }
    }

//    cout << hex << paddr << " " << opt_predictions[set][way] << endl;
}

// use this function to print out your own stats at the end of simulation
void CACHE::llc_replacement_final_stats()
{
   // cout << "Inaccurate Predictions: " << 100*(double)inaccurate/(double)predictions << endl;
    double num_misses = num_high_cost_misses + num_low_cost_misses;
    double total_cost = total_high_cost+total_low_cost;
    std::cout << "Total cost: " << (uint64_t)total_cost << std::endl;
    double high_cost_contribution = 100*total_high_cost/total_cost;
    std::cout << "Cost contribution of high cost misses: " << high_cost_contribution << std::endl;
    double low_cost_contribution = 100*total_low_cost/total_cost;
    std::cout << "Cost contribution of low cost misses: " << low_cost_contribution << std::endl;
    std::cout << "Percentage of high cost misses: " << 100*num_high_cost_misses/num_misses << std::endl;
    std::cout << "Percentage of low cost misses: " << 100*num_low_cost_misses/num_misses << std::endl;
    std::cout << "Average cost of a miss: " << total_cost/num_misses << std::endl;
    std::cout << "Average cost of a high cost miss: " << (double)total_high_cost/num_high_cost_misses << std::endl;
    std::cout << "Average cost of a low cost miss: " << (double)total_low_cost/num_low_cost_misses << std::endl;

    cout << endl << endl << endl;
    cout << "Fake hits: " << fake_hits << endl;
    cout << endl << endl << endl;
}

void read_opt_decisions(string filename)
{
    cout << "Reading file " << filename << endl << flush;
    ifstream myfile;
    myfile.open (filename.c_str());

    string line;

    while(getline(myfile, line))
    {
        //        cout << line << endl;
        uint64_t pc;
        uint64_t load_address;
        uint64_t interval_type;
        bool is_prefetch;
        bool classification;
        bool hawkeye_accuracy;
        uint64_t length;

        stringstream iss(line); 
        iss >> std::hex >> pc;
        iss >> std::hex >> load_address;
        iss >> std::dec >> is_prefetch;
        iss >> std::dec >> interval_type;
        iss >> std::dec >> classification;
        iss >> std::dec >> hawkeye_accuracy;
        iss >> std::dec >> length;

        //        cout << hex << load_address << " " << dec << classification << endl;

        if(is_prefetch)
        {
            if((interval_type == 3) && (length > 5))
            {
                if(prefetch_fake_hit.find(load_address) == prefetch_fake_hit.end())
                    prefetch_fake_hit[load_address].clear();

                prefetch_fake_hit[load_address].push_back(1);
            }
            else
            {
                //assert(interval_type == 1 || interval_type == 5);
                if(prefetch_decisions.find(load_address) == prefetch_decisions.end())
                    prefetch_decisions[load_address].clear();

                prefetch_decisions[load_address].push_back(classification);
            }
        }
        else
        {
            if(decisions.find(load_address) == decisions.end())
                decisions[load_address].clear();

            decisions[load_address].push_back(classification);
        }
    }

    uint64_t total = 0;
    for(map<uint64_t, vector<bool> >::iterator it=decisions.begin(); it != decisions.end(); it++)
    {
        total += it->second.size();
    }

    cout << "Total decisions: " << total << endl;
}


